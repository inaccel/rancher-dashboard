{"version":3,"file":"js/4277.192b7d07.js","mappings":"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","sources":["webpack://dashboard/./shell/pages/c/_cluster/manager/jwt.authentication/index.vue","webpack://dashboard/./shell/pages/c/_cluster/manager/jwt.authentication/index.vue?ca6f"],"sourcesContent":["<script>\nimport { MANAGEMENT } from '@shell/config/types';\nimport { STATE, AGE } from '@shell/config/table-headers';\nimport { STATES_ENUM, colorForState } from '@shell/plugins/dashboard-store/resource-class';\nimport ResourceTable, { defaultTableSortGenerationFn } from '@shell/components/ResourceTable';\nimport Loading from '@shell/components/Loading';\nimport Masthead from '@shell/components/ResourceList/Masthead';\nimport { allHash } from '@shell/utils/promise';\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport { BadgeState } from '@components/BadgeState';\nimport TypeDescription from '@shell/components/TypeDescription';\n\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport Banner from '@components/Banner/Banner.vue';\n\nexport default {\n  name:       'ClusterProxyConfig',\n  components: {\n    ResourceTable, Loading, Masthead, BadgeState, Banner, TypeDescription\n  },\n  mixins: [ResourceFetch],\n  async fetch() {\n    const hash = {\n      mgmtClusters: this.$fetchType(MANAGEMENT.CLUSTER),\n      proxyConfig:  this.$store.dispatch('management/findAll', { type: MANAGEMENT.CLUSTER_PROXY_CONFIG, opt: { omitExcludeFields: ['metadata.managedFields'] } })\n    };\n\n    const res = await allHash(hash);\n\n    this.clusters = res.mgmtClusters;\n    this.proxyConfigs = res.proxyConfig;\n  },\n\n  data() {\n    return {\n      clusters:                         [],\n      proxyConfigs:                     [],\n      resource:                         MANAGEMENT.CLUSTER_PROXY_CONFIG,\n      schema:                           this.$store.getters['management/schemaFor'](MANAGEMENT.CLUSTER_PROXY_CONFIG),\n      useQueryParamsForSimpleFiltering: false,\n      errors:                           [],\n      forceUpdateLiveAndDelayed:        5\n    };\n  },\n  methods: {\n    closeError(index) {\n      this.errors = this.errors.filter((_, i) => i !== index);\n    },\n    sortGenerationFn() {\n      // This is needed to make sure table gets refreshed when the status changes. Otherwise, it uses cached values.\n      const base = defaultTableSortGenerationFn(this.schema, this.$store);\n\n      return base + this.forceUpdateLiveAndDelayed;\n    },\n  },\n  computed: {\n    headers() {\n      const out = [\n        {\n          ...STATE,\n          value: 'value',\n        },\n        {\n          name:      'clusterName',\n          labelKey:  'jwt.headers.clusterName',\n          value:     'clusterName',\n          sort:      'clusterName',\n          search:    ['clusterName'],\n          formatter: 'LinkDetail'\n        },\n\n        {\n          name:      'updatedOn',\n          labelKey:  'jwt.headers.updatedOn',\n          value:     'updatedOn',\n          sort:      'updatedOn',\n          formatter: 'Date',\n        },\n        {\n          ...AGE,\n          labelKey: 'jwt.headers.clusterAge',\n        },\n      ];\n\n      return out;\n    },\n    rows() {\n      const proxyConfigMap = new Map();\n      const rows = [];\n\n      const enableAction = {\n        action:     'activate',\n        allEnabled: false,\n        anyEnabled: true,\n        bulkable:   true,\n        enabled:    true,\n        icon:       'icon icon-checkmark',\n        label:      this.t('jwt.actions.activate'),\n        invoke:     async(opts, resources) => {\n          const promises = [];\n\n          try {\n            resources.forEach((resource) => {\n              const res = resource.enable();\n\n              promises.push(res);\n            });\n            await Promise.all(promises);\n          } catch (e) {\n            this.errors = exceptionToErrorsArray(e);\n          }\n        }\n      };\n      const disableAction = {\n        action:     'deactivate',\n        allEnabled: false,\n        anyEnabled: true,\n        bulkable:   true,\n        enabled:    true,\n        icon:       'icon icon-x',\n        label:      this.t('jwt.actions.deactivate'),\n        invoke:     async(opts, resources) => {\n          const promises = [];\n\n          try {\n            resources.forEach((resource) => {\n              const res = resource.disable();\n\n              promises.push(res);\n            });\n            await Promise.all(promises);\n          } catch (e) {\n            this.errors = exceptionToErrorsArray(e);\n          }\n        }\n      };\n\n      this.proxyConfigs.forEach((config) => {\n        const id = config.metadata.namespace;\n\n        proxyConfigMap.set(id, { config });\n      });\n\n      this.clusters.forEach((cluster) => {\n        const id = cluster.id;\n        const clusterName = cluster.spec.displayName;\n\n        if (id !== 'local') {\n          const config = proxyConfigMap.get(id)?.config;\n\n          const value = config?.enabled || '';\n          const configName = config?.metadata?.name || '';\n          let updatedOn = '';\n\n          if (value) {\n            updatedOn = config?.metadata?.managedFields?.find((field) => field.operation === 'Update')?.time || '';\n          }\n          const stateBackground = value ? colorForState(STATES_ENUM.ACTIVE).replace('text', 'bg') : colorForState(STATES_ENUM.INFO).replace('text', 'bg');\n          const stateLabel = value ? this.t('jwt.state.enabled') : this.t('jwt.state.disabled');\n          const creationTimestamp = cluster.metadata.creationTimestamp;\n          const availableActions = value ? [disableAction] : [enableAction];\n          const enable = async() => {\n            if (!configName) {\n              const clusterProxyConfig = await this.$store.dispatch('management/create', {\n                enabled:  true,\n                metadata: { namespace: id, name: 'clusterproxyconfig' },\n              });\n\n              return clusterProxyConfig.save({ url: 'v1/management.cattle.io.clusterproxyconfigs', method: 'POST' });\n            } else {\n              config.enabled = true;\n\n              return config.save();\n            }\n          };\n          const disable = async() => {\n            config.enabled = false;\n\n            return config.save();\n          };\n\n          rows.push({\n            id, clusterName, value, stateBackground, stateLabel, creationTimestamp, updatedOn, availableActions, enable, disable\n          });\n        }\n      });\n      this.forceUpdateLiveAndDelayed = new Date().getTime();\n\n      return rows;\n    },\n  },\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div\n    v-else\n    class=\"outlet\"\n  >\n    <Masthead\n      :schema=\"schema\"\n      :resource=\"resource\"\n      :isCreatable=\"false\"\n      :type-display=\"t('jwt.title')\"\n    >\n      <template #typeDescription>\n        <TypeDescription :resource=\"'jwt.authentication'\" />\n      </template>\n    </Masthead>\n\n    <Banner\n      v-for=\"(err, i) in errors\"\n      :key=\"i\"\n      color=\"error\"\n      :label=\"err\"\n      :closable=\"true\"\n      @close=\"closeError(i)\"\n    />\n\n    <ResourceTable\n      :schema=\"schema\"\n      :headers=\"headers\"\n      :key-field=\"'id'\"\n      :namespaced=\"false\"\n      :rows=\"rows\"\n      :tableActions=\"true\"\n      :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      :sort-generation-fn=\"sortGenerationFn\"\n      data-testid=\"jwt-authentication-list\"\n    >\n      <template #col:state=\"{row}\">\n        <td>\n          <BadgeState\n            :color=\"row.stateBackground\"\n            :label=\"row.stateLabel\"\n            class=\"state-bagde\"\n          />\n        </td>\n      </template>\n    </ResourceTable>\n  </div>\n</template>\n","import { render } from \"./index.vue?vue&type=template&id=653a494e\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","$fetchState","schema","resource","isCreatable","t","typeDescription","errors","err","i","key","color","label","closable","closeError","headers","namespaced","rows","tableActions","forceUpdateLiveAndDelayed","useQueryParamsForSimpleFiltering","sortGenerationFn","row","stateBackground","stateLabel","name","components","ResourceTable","Loading","Masthead","BadgeState","Banner","TypeDescription","mixins","fetch","hash","mgmtClusters","this","$fetchType","CLUSTER","proxyConfig","$store","dispatch","type","CLUSTER_PROXY_CONFIG","opt","omitExcludeFields","res","clusters","proxyConfigs","data","getters","methods","index","filter","_","base","computed","out","value","labelKey","sort","search","formatter","proxyConfigMap","Map","enableAction","action","allEnabled","anyEnabled","bulkable","enabled","icon","invoke","async","opts","resources","promises","forEach","enable","push","Promise","all","e","disableAction","disable","config","id","metadata","namespace","set","cluster","clusterName","spec","displayName","get","configName","updatedOn","managedFields","find","field","operation","time","ACTIVE","replace","INFO","creationTimestamp","availableActions","save","clusterProxyConfig","url","method","Date","getTime","__exports__","render"],"sourceRoot":""}