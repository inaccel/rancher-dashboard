{"version":3,"sources":["webpack:///./shell/plugins/codemirror.js"],"names":["isLineComment","cm","lineNo","test","getTokenTypeAt","CodeMirror","Pos","commentIndent","text","getLine","substr","search","countColumn","getOption","lineIndent","match","spaceTo","length","strPad","Vue","use","VueCodemirror","registerHelper","start","myIndent","line","lastLineInFold","i","end","lastLine","indent","from","to","defineExtension","regex","this","operation","firstLine","e","foldCode"],"mappings":"sUAwCA,SAASA,EAAcC,EAAIC,GACzB,MAAO,cAAcC,KAAKF,EAAGG,eAAeC,IAAWC,IAAIJ,EAAQ,KAGrE,SAASK,EAAcN,EAAIC,GACzB,IAAMM,KAAOP,EAAGQ,QAAQP,GAAQQ,OAAO,GAGvC,OAAiB,IAFDF,KAAKG,OAAO,OAGlB,EAGEN,IAAWO,YAAYJ,KAAM,KAAMP,EAAGY,UAAU,YAW9D,SAASC,EAAWb,EAAIC,GACtB,IAAIM,KAAOP,EAAGQ,QAAQP,GAChBa,EAAQP,KAAKO,MAAM,sBAEzB,IAAMA,EACJ,OAAQ,EAGV,IAAMC,EAAUD,EAAM,GAAGE,OAIzB,OAFAT,KAAOU,YAAO,GAAIF,GAAWD,EAAM,GAE9B,cAAcZ,KAAKF,EAAGG,eAAeC,IAAWC,IAAIJ,EAAQc,EAAU,MACjE,EAGHX,IAAWO,YAAYJ,KAAM,KAAMP,EAAGY,UAAU,YA1CzDM,UAAIC,IAAIC,KACOA,YAAf,EA6CAhB,IAAWiB,eAAe,OAAQ,UAAU,SAACrB,EAAIsB,GAC/C,IAAMC,EAAWV,EAAWb,EAAIsB,EAAME,MAEtC,KAAID,EAAW,GAAf,CAOA,IAJA,IAAIE,EAAiB,KAIZC,EAAIJ,EAAME,KAAO,EAAGG,EAAM3B,EAAG4B,WAAYF,GAAKC,IAAOD,EAAG,CAC/D,IAAMG,EAAShB,EAAWb,EAAI0B,GAE9B,IAAgB,IAAZG,OACG,MAAIA,EAASN,GAOlB,MALAE,EAAiBC,GAQrB,OAAID,EACK,CACLK,KAAM1B,IAAWC,IAAIiB,EAAME,KAAMxB,EAAGQ,QAAQc,EAAME,MAAMR,QACxDe,GAAM3B,IAAWC,IAAIoB,EAAgBzB,EAAGQ,QAAQiB,GAAgBT,cAHpE,MAQFZ,IAAW4B,gBAAgB,qBAAqB,SAASC,GAAO,WAC9DC,KAAKC,WAAU,WACb,IAAK,IAAIT,EAAI,EAAKU,YAAaC,EAAI,EAAKT,WAAYF,GAAKW,EAAGX,IAAK,CAClD,EAAKlB,QAAQkB,GAEhBZ,MAAMmB,IACd,EAAKK,SAASlC,IAAWC,IAAIqB,EAAG,GAAI,KAAM,eAMlDtB,IAAWiB,eAAe,OAAQ,gBAAgB,SAACrB,EAAIsB,GACrD,GAAMvB,EAAcC,EAAIsB,EAAME,MAA9B,CAIA,IAAMD,EAAWjB,EAAcN,EAAIsB,EAAME,MAEzC,KAAID,EAAW,GAAf,CAQA,IAJA,IAAIE,EAAiB,KAIZC,EAAIJ,EAAME,KAAO,EAAGG,EAAM3B,EAAG4B,WAAYF,GAAKC,GAC/C5B,EAAcC,EAAI0B,KADoCA,EAAG,CAK/D,IAAMG,EAASvB,EAAcN,EAAI0B,GAEjC,IAAgB,IAAZG,OAEG,MAAIA,EAASN,GAOlB,MALAE,EAAiBC,GASrB,OAAID,EACK,CACLK,KAAM1B,IAAWC,IAAIiB,EAAME,KAAMxB,EAAGQ,QAAQc,EAAME,MAAMR,QACxDe,GAAM3B,IAAWC,IAAIoB,EAAgBzB,EAAGQ,QAAQiB,GAAgBT,cAHpE","file":"bc5f40068d6a3d7f727a.js","sourcesContent":["/*\n * NOTE: This isn't actually a real plugin anymore, it's is dynamically loaded in components/CodeMirror.vue\n * so that it doesn't all get loaded put into vendor.js\n */\n\nimport Vue from 'vue';\nimport VueCodemirror from 'vue-codemirror';\nimport CodeMirror from 'codemirror';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/yaml/yaml.js';\nimport 'codemirror/mode/javascript/javascript.js';\n\n// import 'codemirror/mode/dockerfile/dockerfile.js';\n// import 'codemirror/mode/shell/shell.js';\n// import 'codemirror/mode/markdown/markdown.js';\n\nimport 'codemirror/theme/base16-light.css';\nimport 'codemirror/theme/base16-dark.css';\n\nimport 'codemirror/keymap/vim.js';\nimport 'codemirror/keymap/emacs.js';\nimport 'codemirror/keymap/sublime.js';\n\nimport 'codemirror/addon/lint/lint.css';\nimport 'codemirror/addon/lint/lint.js';\nimport 'codemirror/addon/lint/yaml-lint.js';\n\nimport 'codemirror/addon/fold/foldgutter.css';\nimport 'codemirror/addon/fold/foldgutter.js';\n\nimport 'codemirror/addon/hint/show-hint.css';\nimport 'codemirror/addon/hint/show-hint.js';\nimport 'codemirror/addon/hint/anyword-hint.js';\n\nimport { strPad } from '@shell/utils/string';\n\nVue.use(VueCodemirror);\nexport default VueCodemirror;\n\nfunction isLineComment(cm, lineNo) {\n  return /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0)));\n}\n\nfunction commentIndent(cm, lineNo) {\n  const text = cm.getLine(lineNo).substr(1);\n  const spaceTo = text.search(/\\S/);\n\n  if (spaceTo === -1 ) {\n    return -1;\n  }\n\n  const out = CodeMirror.countColumn(text, null, cm.getOption('tabSize'));\n\n  return out;\n}\n\n// Like the regular indent in codemirror, but treat a YAML array\n// item that's at the same level as the parent key as intented on level more\n//\n// foo:\n// - a\n// - b\nfunction lineIndent(cm, lineNo) {\n  let text = cm.getLine(lineNo);\n  const match = text.match(/(\\s*(-\\s+)?)(\\S.*)/);\n\n  if ( !match ) {\n    return -1;\n  }\n\n  const spaceTo = match[1].length;\n\n  text = strPad('', spaceTo) + match[3];\n\n  if ( /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1)))) {\n    return -1;\n  }\n\n  return CodeMirror.countColumn(text, null, cm.getOption('tabSize'));\n}\n\n// https://github.com/codemirror/CodeMirror/blob/master/addon/fold/indent-fold.js\nCodeMirror.registerHelper('fold', 'indent', (cm, start) => {\n  const myIndent = lineIndent(cm, start.line);\n\n  if (myIndent < 0) {\n    return;\n  }\n  let lastLineInFold = null;\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (let i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    const indent = lineIndent(cm, i);\n\n    if (indent === -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) {\n    return {\n      from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n      to:   CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n    };\n  }\n});\n\nCodeMirror.defineExtension('foldLinesMatching', function(regex) {\n  this.operation(() => {\n    for (let i = this.firstLine(), e = this.lastLine(); i <= e; i++) {\n      const line = this.getLine(i);\n\n      if ( line.match(regex) ) {\n        this.foldCode(CodeMirror.Pos(i, 0), null, 'fold');\n      }\n    }\n  });\n});\n\nCodeMirror.registerHelper('fold', 'yamlcomments', (cm, start) => {\n  if ( !isLineComment(cm, start.line) ) {\n    return;\n  }\n\n  const myIndent = commentIndent(cm, start.line);\n\n  if (myIndent < 0) {\n    return;\n  }\n\n  let lastLineInFold = null;\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (let i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    if ( !isLineComment(cm, i) ) {\n      break;\n    }\n\n    const indent = commentIndent(cm, i);\n\n    if (indent === -1) {\n      // empty?\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n\n  if (lastLineInFold) {\n    return {\n      from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n      to:   CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n    };\n  }\n});\n"],"sourceRoot":""}